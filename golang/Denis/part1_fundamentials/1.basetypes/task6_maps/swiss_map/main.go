package main

import (
	"fmt"
	"runtime"
	"unsafe"
)

func main() {
	fmt.Println("=== SWISS MAP –≤ Go 1.24+ ===")
	fmt.Printf("–í–µ—Ä—Å–∏—è Go: %s\n", runtime.Version())
	fmt.Println()

	// 1. –û–°–ù–û–í–ù–´–ï –û–¢–õ–ò–ß–ò–Ø SWISS MAP
	fmt.Println("1. –û–°–ù–û–í–ù–´–ï –û–¢–õ–ò–ß–ò–Ø SWISS MAP")
	fmt.Println("   üìä –°—Ç–∞—Ä–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è (–¥–æ 1.24):")
	fmt.Println("   - –ó–∞–∫—Ä—ã—Ç–∞—è –∞–¥—Ä–µ—Å–∞—Ü–∏—è (chaining)")
	fmt.Println("   - –ë–∞–∫–µ—Ç—ã –ø–æ 8 —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
	fmt.Println("   - Load factor: 81.25%")
	fmt.Println("   - –≠–≤–∞–∫—É–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (rehashing)")
	fmt.Println()
	fmt.Println("   üöÄ –ù–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è (Swiss Map):")
	fmt.Println("   - –û—Ç–∫—Ä—ã—Ç–∞—è –∞–¥—Ä–µ—Å–∞—Ü–∏—è")
	fmt.Println("   - –ì—Ä—É–ø–ø—ã –ø–æ 16 —Å–ª–æ—Ç–æ–≤")
	fmt.Println("   - Load factor: 87.5%")
	fmt.Println("   - SIMD-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
	fmt.Println("   - –ö–∞—Ç–∞–ª–æ–≥ —Ö–µ—à-—Ç–∞–±–ª–∏—Ü")
	fmt.Println()

	// 2. –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–ï–ò–ú–£–©–ï–°–¢–í
	fmt.Println("2. –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–ï–ò–ú–£–©–ï–°–¢–í")

	// –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
	fmt.Println("   üíæ –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏:")
	fmt.Println("   - –°—Ç–∞—Ä–∞—è –º–∞–ø–∞: +63% –ø–∞–º—è—Ç–∏ –≤ —Å—Ä–µ–¥–Ω–µ–º")
	fmt.Println("   - Swiss Map: –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ")
	fmt.Println()

	// –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
	fmt.Println("   ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
	fmt.Println("   - –ß—Ç–µ–Ω–∏–µ: –¥–æ +30% –±—ã—Å—Ç—Ä–µ–µ")
	fmt.Println("   - –ó–∞–ø–∏—Å—å: –¥–æ +35% –±—ã—Å—Ç—Ä–µ–µ")
	fmt.Println("   - –ò—Ç–µ—Ä–∞—Ü–∏—è: –¥–æ +60% –±—ã—Å—Ç—Ä–µ–µ")
	fmt.Println()

	// 3. –í–ù–£–¢–†–ï–ù–ù–ï–ï –£–°–¢–†–û–ô–°–¢–í–û SWISS MAP
	fmt.Println("3. –í–ù–£–¢–†–ï–ù–ù–ï–ï –£–°–¢–†–û–ô–°–¢–í–û")
	
	// –•–µ—à-—Ñ—É–Ω–∫—Ü–∏—è
	fmt.Println("   üîë –•–µ—à-—Ñ—É–Ω–∫—Ü–∏—è:")
	fmt.Println("   - memhash (AES –∏–ª–∏ wyhash)")
	fmt.Println("   - 64-–±–∏—Ç–Ω—ã–π —Ö–µ—à —Ä–∞–∑–¥–µ–ª—è–µ—Ç—Å—è –Ω–∞:")
	fmt.Println("     h1 (57 –±–∏—Ç) - –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞")
	fmt.Println("     h2 (7 –±–∏—Ç)  - –¥–ª—è –≥—Ä—É–ø–ø")
	fmt.Println()

	// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
	fmt.Println("   üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:")
	fmt.Println("   –ö–∞—Ç–∞–ª–æ–≥ ‚Üí –•–µ—à-—Ç–∞–±–ª–∏—Ü—ã ‚Üí –ì—Ä—É–ø–ø—ã ‚Üí –°–ª–æ—Ç—ã")
	fmt.Println("   - –ö–∞—Ç–∞–ª–æ–≥: —Ö–µ—à-—Ç–∞–±–ª–∏—Ü–∞ —É–∫–∞–∑–∞—Ç–µ–ª–µ–π")
	fmt.Println("   - –ì—Ä—É–ø–ø–∞: 16 —Å–ª–æ—Ç–æ–≤ + control word (64 –±–∏—Ç–∞)")
	fmt.Println("   - –°–ª–æ—Ç: –ø–∞—Ä–∞ –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ")
	fmt.Println()

	// 4. CONTROL WORD - –°–ï–†–î–¶–ï SWISS MAP
	fmt.Println("4. CONTROL WORD (–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ)")
	fmt.Println("   –ö–∞–∂–¥–∞—è –≥—Ä—É–ø–ø–∞ –∏–º–µ–µ—Ç 64-–±–∏—Ç–Ω–æ–µ control word:")
	fmt.Println("   - 16 –±–∞–π—Ç (–ø–æ 1 –±–∞–π—Ç—É –Ω–∞ —Å–ª–æ—Ç)")
	fmt.Println("   - –ë–∞–π—Ç –∑–Ω–∞—á–µ–Ω–∏—è:")
	fmt.Println("     0x80: –ø—É—Å—Ç–æ–π —Å–ª–æ—Ç")
	fmt.Println("     0xFE: tombstone (—É–¥–∞–ª–µ–Ω–Ω—ã–π)")
	fmt.Println("     0x00-0x7F: –∑–∞–Ω—è—Ç (7 –±–∏—Ç h2)")
	fmt.Println()

	// 5. SIMD-–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò
	fmt.Println("5. SIMD-–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò")
	fmt.Println("   –û–¥–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç 16 —Å–ª–æ—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!")
	fmt.Println("   –ü—Ä–∏–º–µ—Ä –ø–æ–∏—Å–∫–∞:")
	fmt.Println("   - –í—ã—á–∏—Å–ª—è–µ–º h2 –∏—Å–∫–æ–º–æ–≥–æ –∫–ª—é—á–∞")
	fmt.Println("   - SIMD-—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å control word")
	fmt.Println("   - –ü–æ–ª—É—á–∞–µ–º –±–∏—Ç–æ–≤—É—é –º–∞—Å–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
	fmt.Println("   - –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (1/128 –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–æ–ª–ª–∏–∑–∏–∏)")
	fmt.Println()

	// 6. –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø
	fmt.Println("6. –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø")

	// –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø—ã
	m := make(map[int]string)
	fmt.Printf("   –°–æ–∑–¥–∞–Ω–∞ –º–∞–ø–∞: —Ç–∏–ø=%T, —Ä–∞–∑–º–µ—Ä=%d –±–∞–π—Ç\n", m, unsafe.Sizeof(m))

	// –ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞–ø—ã
	for i := 0; i < 10; i++ {
		m[i] = fmt.Sprintf("value%d", i)
	}
	fmt.Printf("   –î–æ–±–∞–≤–ª–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: %d\n", len(m))

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
	if value, exists := m[5]; exists {
		fmt.Printf("   –ö–ª—é—á 5 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: %s\n", value)
	}

	if _, exists := m[99]; !exists {
		fmt.Printf("   –ö–ª—é—á 99 –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n")
	}
	fmt.Println()

	// 7. –ö–ê–ö –≠–¢–û –†–ê–ë–û–¢–ê–ï–¢ –ù–ê –ü–†–ê–ö–¢–ò–ö–ï
	fmt.Println("7. –ü–†–û–¶–ï–°–° –ü–û–ò–°–ö–ê –í SWISS MAP")
	fmt.Println("   1. –í—ã—á–∏—Å–ª—è–µ–º hash(key) ‚Üí 64 –±–∏—Ç–∞")
	fmt.Println("   2. –î–µ–ª–∏–º –Ω–∞ h1 (57 –±–∏—Ç) –∏ h2 (7 –±–∏—Ç)")
	fmt.Println("   3. –ü–æ h1 –Ω–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—É –≤ –∫–∞—Ç–∞–ª–æ–≥–µ")
	fmt.Println("   4. SIMD-—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ h2 —Å control word –≥—Ä—É–ø–ø—ã")
	fmt.Println("   5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏-–∫–∞–Ω–¥–∏–¥–∞—Ç—ã")
	fmt.Println("   6. –ù–∞—Ö–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ")
	fmt.Println()

	// 8. –†–û–°–¢ –ú–ê–ü–´
	fmt.Println("8. –ü–†–û–¶–ï–°–° –†–û–°–¢–ê –ú–ê–ü–´")
	fmt.Println("   - Load factor > 87.5% ‚Üí —Ä–æ—Å—Ç")
	fmt.Println("   - –£–¥–≤–æ–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—ã")
	fmt.Println("   - –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö (–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)")
	fmt.Println("   - –ö–∞—Ç–∞–ª–æ–≥ –º–æ–∂–µ—Ç —É–¥–≤–∞–∏–≤–∞—Ç—å—Å—è")
	fmt.Println("   - Tombstone –æ—á–∏—â–∞—é—Ç—Å—è –ø—Ä–∏ —Ä–æ—Å—Ç–µ")
	fmt.Println()

	// 9. –û–°–û–ë–ï–ù–ù–û–°–¢–ò –†–ï–ê–õ–ò–ó–ê–¶–ò–ò
	fmt.Println("9. –û–°–û–ë–ï–ù–ù–û–°–¢–ò –†–ï–ê–õ–ò–ó–ê–¶–ò–ò")
	fmt.Println("   üìç –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö:")
	fmt.Println("   - –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
	fmt.Println("   - –£–ª—É—á—à–∞–µ—Ç –∫—ç—à-–ª–æ–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞")
	fmt.Println()
	fmt.Println("   üìç –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —ç–≤–∞–∫—É–∞—Ü–∏–∏:")
	fmt.Println("   - –ù–µ—Ç —Ñ–æ–Ω–æ–≤–æ–≥–æ rehashing")
	fmt.Println("   - –†–æ—Å—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–æ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—Å—Ç–∞–≤–∫–∏")
	fmt.Println()
	fmt.Println("   üìç –ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–µ –ø—Ä–æ–±–∏—Ä–æ–≤–∞–Ω–∏–µ:")
	fmt.Println("   - –£–ª—É—á—à–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–ª–ª–∏–∑–∏—è—Ö")
	fmt.Println()

	// 10. –ö–û–ì–î–ê SWISS MAP –ú–ï–î–õ–ï–ù–ù–ï–ï?
	fmt.Println("10. –ö–û–ì–î–ê SWISS MAP –ú–ï–î–õ–ï–ù–ù–ï–ï?")
	fmt.Println("   ‚ùå –ù–∞ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö –º–∞–ø–∞—Ö (<10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
	fmt.Println("   ‚ùå –ù–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –±–µ–∑ SIMD")
	fmt.Println("   ‚ùå –ü—Ä–∏ —á–∞—Å—Ç–æ–º —Ä–æ—Å—Ç–µ (–≤—Å—Ç–∞–≤–∫–∞ –≤ —É–∂–µ –ø–æ–ª–Ω—É—é –º–∞–ø—É)")
	fmt.Println()

	// 11. –ö–ê–ö –û–¢–ö–õ–Æ–ß–ò–¢–¨ SWISS MAP
	fmt.Println("11. –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï SWISS MAP (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)")
	fmt.Println("   GOEXPERIMENT=noswissmap go build")
	fmt.Println("   –î–ª—è —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ –±–µ–∑ SIMD")
	fmt.Println()

	// 12. –ë–ï–ù–ß–ú–ê–†–ö–ò –ù–ê –†–ê–ó–ù–´–• –†–ê–ó–ú–ï–†–ê–•
	fmt.Println("12. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ")
	fmt.Println("   ‚úÖ –ù–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã–¥–µ–ª—è–π—Ç–µ –º–∞–ø—ã –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏")
	fmt.Println("   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ sync.Map –¥–ª—è read-heavy workload")
	fmt.Println("   ‚úÖ –ü–æ–º–Ω–∏—Ç–µ –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö –≤—Å—Ç–∞–≤–∫–∏")
	fmt.Println("   ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π —á–µ—Ä–µ–∑ –≤—Ç–æ—Ä–æ–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
	fmt.Println()

	fmt.Println("Swiss Map - —ç—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —à–∞–≥ –≤–ø–µ—Ä–µ–¥ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
	fmt.Println("–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –≤ Go! üéâ")
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞–ø–∞–º–∏
func demonstrateAdvancedFeatures() {
	fmt.Println("\n=== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–ò–ß–ò ===")
	
	// –ú–∞–ø–∞ —Å —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞
	type ComplexKey struct {
		ID    int
		Group string
	}
	
	complexMap := make(map[ComplexKey]string)
	complexMap[ComplexKey{1, "admin"}] = "administrator"
	complexMap[ComplexKey{2, "user"}] = "regular user"
	
	fmt.Printf("–ú–∞–ø–∞ —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏: %v\n", complexMap)
	
	// –ú–∞–ø–∞ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏–π
	funcMap := make(map[string]func(int) int)
	funcMap["double"] = func(x int) int { return x * 2 }
	funcMap["square"] = func(x int) int { return x * x }
	
	fmt.Printf("funcMap['double'](5) = %d\n", funcMap["double"](5))
}

/*
	üéØ –ö–õ–Æ–ß–ï–í–´–ï –û–¢–õ–ò–ß–ò–Ø SWISS MAP:
	1. –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
						–°—Ç–∞—Ä–∞—è –º–∞–ø–∞				Swiss Map
		–ê–¥—Ä–µ—Å–∞—Ü–∏—è		–ó–∞–∫—Ä—ã—Ç–∞—è (chaining)		–û—Ç–∫—Ä—ã—Ç–∞—è
		–°—Ç—Ä—É–∫—Ç—É—Ä–∞		–ë–∞–∫–µ—Ç—ã –ø–æ 8 —ç–ª–µ–º–µ–Ω—Ç–æ–≤	–ì—Ä—É–ø–ø—ã –ø–æ 16 —Å–ª–æ—Ç–æ–≤
		Load factor		81.25%					87.5%
	
	2. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
		+30% —á—Ç–µ–Ω–∏–µ (–±–æ–ª—å—à–∏–µ –º–∞–ø—ã)
		+35% –∑–∞–ø–∏—Å—å (pre-allocated)
		+60% –∏—Ç–µ—Ä–∞—Ü–∏—è (–º–∞–ª—ã–µ –º–∞–ø—ã)

	3. –ü–∞–º—è—Ç—å
		-63% –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤ —Å—Ä–µ–¥–Ω–µ–º
		–õ—É—á—à–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
		–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ overhead –Ω–∞ —Ü–µ–ø–æ—á–∫–∏

	4. –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
	// Control word —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
	type group struct {
		control [16]byte    // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
		slots   [16]slot    // –ü–∞—Ä—ã –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ
	}

	type slot struct {
		key   KeyType
		value ValueType
	}

	5. SIMD-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

	// –ü—Å–µ–≤–¥–æ–∫–æ–¥ SIMD-–æ–ø–µ—Ä–∞—Ü–∏–∏
	MOVD    h2, V0           // –ó–∞–≥—Ä—É–∂–∞–µ–º h2 –≤ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä
	VCMEQ   control, V0, V1  // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å control word
	VMOV    V1, mask         // –ü–æ–ª—É—á–∞–µ–º –±–∏—Ç–æ–≤—É—é –º–∞—Å–∫—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π

	üö® –í–ê–ñ–ù–´–ï –ù–Æ–ê–ù–°–´:
	1. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
	// –≠—Ç–∞ –≤—Å—Ç–∞–≤–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ–π –µ—Å–ª–∏ –º–∞–ø–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞
	m[key] = value // –ú–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å —Ä–æ—Å—Ç –∏ –ø–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö

	2. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ñ–æ–Ω–æ–≤–æ–π —ç–≤–∞–∫—É–∞—Ü–∏–∏
	–ù–µ—Ç —Ñ–æ–Ω–æ–≤–æ–≥–æ rehashing - –≤—Å–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ.

	3. –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç SIMD
	–ù–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –±–µ–∑ SIMD –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∏–∂–µ.
	
	üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
		- –ù–µ –≤—ã–¥–µ–ª—è–π—Ç–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
		- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ sync.Map –¥–ª—è read-heavy workload
		- –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ
		- –ü–æ–º–Ω–∏—Ç–µ –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö

	Swiss Map - —ç—Ç–æ –æ–≥—Ä–æ–º–Ω—ã–π —à–∞–≥ –≤–ø–µ—Ä–µ–¥ –¥–ª—è Go! –¢–µ–ø–µ—Ä—å –º–∞–ø—ã –Ω–µ —Ç–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä–µ–µ, –Ω–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø–∞–º—è—Ç—å. üöÄ
*/